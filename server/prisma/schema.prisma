generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum OrderEventStatus {
  PENDING
  ACCEPTED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  CASH_ON_DELIVERY
  ONLINE
}

// prisma/schema.prisma
model User {
  id                     Int      @id @default(autoincrement())
  username               String
  email                  String   @unique
  password               String
  role                   Role     @default(USER)
  verificationToken      String?
  verified               Boolean  @default(false)
  defaultShippingAddress Int?
  defaultBillingAddress  Int?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  addresses  Address[]
  cartItems  CartItem[]
  orders     Order[]
  Prebooking Prebooking[]

  @@map("users")
}

model Address {
  id        Int      @id @default(autoincrement())
  lineOne   String
  lineTwo   String?
  city      String
  country   String
  pincode   String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("addresses")
}

model Product {
  id            Int     @id @default(autoincrement())
  Name          String  @db.VarChar(100)
  Description   String? @db.Text
  Price         Decimal @db.Decimal(10, 2)
  Tag           String? @db.VarChar(100)
  ImageUrl      String? @db.VarChar(255)
  StockQuantity Int     @db.Int
  Discount      Int?

  cartItems     CartItem[]
  orderProducts OrderProduct[]

  @@map("products")
}

model CartItem {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cart_items")
}

model Order {
  id          Int           @id @default(autoincrement())
  userId      Int
  user        User          @relation(fields: [userId], references: [id])
  address     String
  netAmount   Decimal
  paymentMode PaymentMethod
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  orderProducts OrderProduct[]
  orderEvents   OrderEvent[]

  @@map("orders")
}

model OrderProduct {
  id        Int      @id @default(autoincrement())
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id])
  quantity  Int
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_products")
}

model OrderEvent {
  id        Int              @id @default(autoincrement())
  orderId   Int
  order     Order            @relation(fields: [orderId], references: [id])
  status    OrderEventStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@map("order_events")
}

model PrebookingCount {
  id    Int @id @default(autoincrement())
  count Int @default(0)

  @@map("prebooking_counts")
}

model Prebooking {
  id     Int  @id @default(autoincrement())
  userId Int
  user   User @relation(fields: [userId], references: [id])
}
